FORMAT: 1A
HOST: https://hermes.ambrosus-test.com

# Ambrosus Node API

Welcome to Ambrosus Node API Documentation.  

### Authentication
Before you can start interacting with API you need to create an account. An account is a pair: address and secret.

Depending on the type of operation you want to perform you are required to provide one of two forms of authentication: signed content or token based.

For entity upload operations the body of the request needs to contain a `content.signature` field. It is generated by signing the [serialized](Serialization) `content.idData` object using the standard ethereum sign function and your private key.

For other operations (modifying accounts and querying entities) a token should be provided using the http authorization header with `AMB_TOKEN ...` . The calculation of a token is described in the [Token section](Token). 

There is a special third option where you provide a http authorization header `AMB ...` with your account private key. When doing so the gateway will calculate the signature for you. This mechanism can be enabled using a config parameter. __Warning__: Sharing your private key is a security risk. This mechanism should therefore only be used in development and testing environments.  

### Rate limiting
The API is rate limited with 120 requests per minute. That means a client that
is rate limited "replenishes" 2 requests per second according to the token
bucket algorithm. A client is allowed to burst up to 60 requests at once.

For any client that uses batch uploads we recommend implementing a throttling
system where there is incremental back-off as soon as the rate limits are
reached. For example, if the client sees rate limited requests it may back-off
by a random number of seconds before trying again. If the rate limits are hit
once again after backing off it is recommended to wait for a longer time
interval. Here is a longer post on back-off strategies:
https://developerblog.intercom.com/be-prepared-3-ways-to-handle-rate-limits-baeb9215c1bc

The status code for a rate limited request is 429 Too Many Requests.

For more details on the rate limiting algorithm, see:
https://medium.freecodecamp.org/nginx-rate-limiting-in-a-nutshell-128fe9e0126c

### Immutability

__Note:__ All data is immutable, therefore, you will not find update or delete calls.

## Serialization [Serialization] 

When serialising data for hashing and signing, special care needs to be taken so that the result is deterministic. Otherwise the output values may not match, and lead to validation errors. Following rules need to be followed:

* The JSON is serialized to a single-line string without any whitespace characters outside of strings
* All fields in objects are sorted lexicographically
* In other aspects the output should match `JSON.stringify`

## Hashing

Hashes are a very important part of proving the persistence and the immutability of the data. All hashes in the AMB-NODE are computed using the ethereum standard `hashMessage` function as described in [web3 docs](https://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html#hashmessage). The underlying hash function is [Keccak256](https://keccak.team/index.html). 

### Errors

The majority of errors along to the error code provide additional information in `body` with following format:
```{json}
{
  "reason": "What happened"
}
```

## Group Token [Token]

Some requests like account management or accessing to restricted data fields require an access token for authorization. The access token is a base64-encoded [serialized](Serialization) JSON file of following format:
```$json
{
  "signature": $SIGNATURE,
  "idData": {
    "createdBy": $ADDRESS,
    "validUntil": $TIMESTAMP
  }
}
```
where $ADDRESS is your public address and $TIMESTAMP is a UNIX-styled integer specifying token's expiration date.
$SIGNATURE is an elliptic-curve signature of the idData field. Should be signed with the creator's private address. We recommend to create the token locally and use it across Ambrosus API without sending your private key anywhere.
### /token

#### Create token [POST]

__Warning__ This call can be used for development purposes only. Never provide your secret address to anyone.

+ Request
    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Attributes (object)
        + validUntil (number) - Unix timestamp in the future specifying the token expiration time.

    + Body

            {
                "validUntil": 1546300800
            }
+ Response 201 (application/json)

    Created

    + Attributes (object)
        + token (string) - Base64 encoded signed token data.

    + Body

            {
                "token": "eyJpZERhdGEiOnsiY3JlYXRlZEJ5IjoiMHg3NDJFNjJDQzdBMTlFZjdEOWM0NDMwNkMwN0ZBZDU0QjViRjZkNGJFIiwidmFsaWRVbnRpbCI6NDJ9LCJzaWduYXR1cmUiOiIweDY4MWVjZjRiNzM3YzViNGY5ZjlhYTZlMDUzOWIzMzAyNzY0NDQzYWRlNWNmMWJhMTIxMGFmNzA1MTdkYTczOWY1MzBlNTEwYmI0NTc1N2YyNWZiZTE3NzczMWVhNzAxYjVmOTU5NGZlYmQ0ZDA2YjEwOGYyM2NhYjAyMmU5MzNmMWIifQ"
            }


## Group Account

An account represents an actor in the supply chain. This can be a person, a company, a location, etc.

It consists of a pair - a public identifer `address` (compatible with ethereum address) and a `secret` (compatible with ethereum private key). Additionally an account has a list of permissions, which specify what actions user can perform and an access levels, which specifies what data is user able to view.

Account can hold any number of following permissions:

* super_account - Almighty administrator account. Is able to perform all kinds of calls.
* protected_account - account protected from modification. Protected accounts can be created only by super accounts or other protected accounts. Only super accounts can modify the protected accounts. 
* create_asset - allows account to create assets
* create_event - allows account to create events
* register_accounts - allows account to add new accounts
* manage_accounts - allows account to view and manage existing accounts

### /accounts

#### Add account [POST]

__Warning__ Request sender needs to have "register_accounts" permission

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB_TOKEN ...

    + Attributes (object)
        + address (string) - An address of the new account
        + permissions (array) - A list of permissions granted to this account. It is not possible to give permissions the request sender lacks. 
        + accessLevel (number) - Access level of the account. Should be a non-negative integer. Cannot be higher than sender's accessLevel.
        + organization (number, optional) - Identifier of the organization the account belongs to. Should be same as the sender's organization

    + Body

            {
                "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                "permissions" : ["register_accounts","create_asset"],
                "accessLevel" : 0,
                "organization": 12623
            }



+ Response 201 (application/json)

    Added.

    + Body

            {
                "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                "registeredBy": "0x345b44701723a31f457a534801cd181cd38eb5bcd",
                "registeredOn": 32141243,
                "permissions": ["register_accounts", "create_asset"],
                "accessLevel": 0,
                "organization": 12623
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                },
                "registeredBy": {
                  "type": "string",
                  "example": "0x345b44701723a31f457a534801cd181cd38eb5bcd"
                },
                "registeredOn": {
                  "type": "integer"
                },
                "accessLevel": {
                  "type": "integer"
                },
                "permissions": {
                  "type": "array",
                  "items" : {
                  "type" : "string"
                  }
                  "example": ["register_accounts", "create_asset"]
                },
                "organization": {
                  "type": "integer"
                }
              }
            }

+ Response 400 (application/json)

    Validation error

    + Body

+ Response 401 (application/json)

    Authentication error

    + Body

+ Response 403 (application/json)

    Invalid signature or missing register_accounts permission

    + Body

### /accounts{?accessLevel,perPage,page}

#### Find accounts [GET]

__Warning__ Request sender needs to have "manage_accounts" permission

Finds accounts satisfying provided criteria.

+ Parameters

    + accessLevel (string, optional) - Finds only accounts with access level not smaller than provided parameter value
    + perPage (integer, optional) - Number of accounts to return per page (limited to 100)
    + page (integer, optional) - Number of page (more search results than specified in perPage parameter concludes more than one page)

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB_TOKEN ...

+ Response 200 (application/json)

    + Attributes (object)
        + results (array) - The latest 100 accounts matching provided criteria
            + (object) - Account.
              + registeredBy (string) - The address which has registered the account.
              + registeredOn (number) -  - UNIX timestamp of account registration.
              + permissions (array) - A list of permissions granted to this account
              + accessLevel (number) - Access level of the account. Should be a non-negative integer.
              + organization (number) - Identifier of the organization the account belongs to.
        + resultCount (number) - Total number of accounts matching provided criteria.


    + Body

            {
                "results": [
                    {
                        "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                        "registeredBy": "0x345b44701723a31f457a534801cd181cd38eb5bcd",
                        "permissions": ["register_accounts", "create_asset"],
                        "accessLevel": 4,
                        "organization": 12351
                    }
                ],
                "resultCount": 322
            }

+ Response 400 (application/json)

    Validation error

    + Body

+ Response 401 (application/json)

    Authentication error

    + Body

+ Response 403 (application/json)

    Invalid signature or missing register_accounts permission

    + Body

+ Response 404 (application/json)

    Requested account does not exist

    + Body


### /accounts/{accountAddress}

#### Get account [GET]

__Warning__ Request sender needs to have "manage_accounts" permission

+ Parameters
    + accountAddress (string) - An address of the account


+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB_TOKEN ...

+ Response 200 (application/json)

    + Attributes (object)
        + registeredBy (string) - The address which has registered the account.
        + registeredOn (number) -  - UNIX timestamp of account registration.
        + permissions (array) - A list of permissions granted to this account
        + accessLevel (number) - Access level of the account. Should be a non-negative integer.
        + organization (number) - Identifier of the organization the account belongs to

    + Body

            {
                "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                "registeredBy": "0x345b44701723a31f457a534801cd181cd38eb5bcd",
                "registeredOn": 32141243,
                "permissions": ["register_accounts", "create_asset"],
                "accessLevel": 4
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                },
                "registeredBy": {
                  "type": "string",
                  "example": "0x345b44701723a31f457a534801cd181cd38eb5bcd"
                },
                "registeredOn": {
                  "type": "integer"
                },
                "permissions": {
                  "type": "array",
                  "items" : {
                  "type" : "string"
                  }
                  "example": ["register_accounts", "create_asset"]
                },
                "accessLevel": {
                  "type": "integer"
                }
              }
            }


+ Response 400 (application/json)

    Validation error

    + Body

+ Response 401 (application/json)

    Authentication error

    + Body

+ Response 403 (application/json)

    Invalid signature or missing register_accounts permission

    + Body


#### Modify account [PUT]

__Warning__ Request sender needs to have "manage_accounts" permission  
It is not possible to modify protected accounts and accounts belonging to different organizations.

+ Parameters
    + accountAddress (string) - An address of the account


+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB_TOKEN ...

    + Attributes (object)
        + permissions (array, optional) - A list of permissions granted to this account. It is not possible to give permissions the request sender lacks. 
        + accessLevel (number, optional) - Access level of the account. Should be a non-negative integer. Cannot be higher than senders's accessLevel.
        + organization (number, optional) - Identifier of the organization the account belongs to.
    + Body

            {
                "permissions" : ["register_accounts","create_asset"],
                "accessLevel" : 0
            }



+ Response 200 (application/json)

    + Body

            {
                "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                "registeredBy": "0x345b44701723a31f457a534801cd181cd38eb5bcd",
                "registeredOn": 32141243,
                "permissions": ["register_accounts", "create_asset"],
                "accessLevel": 4
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                },
                "registeredBy": {
                  "type": "string",
                  "example": "0x345b44701723a31f457a534801cd181cd38eb5bcd"
                },
                "registeredOn": {
                  "type": "integer"
                },
                "accessLevel": {
                  "type": "integer"
                },
                "permissions": {
                  "type": "array",
                  "items" : {
                  "type" : "string"
                  }
                  "example": ["register_accounts", "create_asset"]
                }
              }
            }

+ Response 400 (application/json)

    Validation error

    + Body

+ Response 401 (application/json)

    Authentication error

    + Body

+ Response 403 (application/json)

    Invalid signature or missing register_accounts permission

    + Body


## Group Asset

Assets are primary elements moving through a supply chain. The are the nouns of the system. They can represent an ingredient, product, package of products or any other type of container.

An Asset on its own function only as a handle for a Event stream. Because of this, they only contain an `idData` structure holding minimal information about their creation.

Assets are identified by an `assetId` field which is a sha3 hash calculated from the `content` field.

### /assets

#### Create an asset [POST]

Places (after intensive validations) the provided asset object into the system.

__Warning__ Request sender needs to have "create_asset" permission

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Attributes (object)
        + assetId (string) - Content-addressable identifier of the asset.
        + content (object) - All meaningful content of the asset, base of assetId.
            + signature (string) - elliptic-curve signature of the idData field. Should be signed with the creator's private address.
            + idData (object) - General information about an asset.
                + createdBy  (string) - Public address of the asset creator.
                + timestamp (number) - UNIX timestamp of asset creation.
                + sequenceNumber (number) - Used to assure that all assets are unique


    + Body

            {
                "assetId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp": 1503424923,
                        "sequenceNumber": 3
                    }
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "assetId": {
                  "type": "string",
                  "format": "int64",
                  "example": "0xc5cfd04.....30755ed65"
                },
                "contents": {
                  "type": "object",
                  "properties": {
                    "signature": {
                      "type": "string",
                      "format": "int64",
                      "example": "0x30755ed65396facf86c53e6...65c5cfd04be400"
                    },
                    "idData": {
                      "type": "object",
                      "properties": {
                        "createdBy": {
                          "type": "string",
                          "format": "int64",
                          "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                        },
                        "timestamp": {
                          "type": "integer",
                          "format": "timestamp",
                          "example": 1503424923
                        },
                        "sequenceNumber": {
                          "type": "integer",
                          "example": 3
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 201 (application/json)

    Created

    + Body

            {
                "assetId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp": 1503424923,
                        "sequenceNumber": 3
                    }
                }
            }

+ Response 400 (application/json)

    Invalid input

    + Body

+ Response 403 (application/json)

    The createdBy user is not registered or has no "create_asset" permission

    + Body


### /assets/{assetId}

#### Fetch an asset by Id [GET]

Fetches asset with provided assetId in the system.

+ Parameters

    + assetId (string, required) - ID of an asset

+ Response 200 (application/json)

    Asset with provided assetId

    + Attributes (object)
        + assetId (string) - Content-addressable identifier of the asset.
        + content (object) - All meaningful content of the asset, base of assetId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - General information about an asset.
                + createdBy (string) - Public address of the asset creator.
                + timestamp (number) - UNIX timestamp of asset creation.
                + sequenceNumber (number) - Used to assure that all assets are unique
        + metadata (object) - Asset service data.
            + bundleId (string) - If the asset has already been added to a bundle, Id of the bundle holding the event
            + bundleTransactionHash (string) - If the asset has already been added to a bundle, identifier of the transaction on which the proof of bundle has been uploaded.
              More info on the transaction can be found under `http://explorer-test.ambrosus.com/#/tx/{bundleTransactionHash}`
            + bundleProofBlock (number) - If the asset has already been added to a bundle, block number in which the proof of the bundle has been included
            + bundleUploadTimestamp (number) - If the asset has already been added to a bundle, timestamp of bundle proof upload


    + Body

            {
                "assetId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp": 1503424923,
                        "sequenceNumber": 3
                    }
                },
                "metadata": {
                    "bundleId": "0x85a427a3.....cd1d38ebbd",
                    "bundleTransactionHash": "0x21ab....1cdf8e55b37"
                    "bundleUploadTimestamp": 1503424969,
                    "bundleProofBlock": 3221
                }
            }

+ Response 404 (application/json)

    No asset with such assetId found

    + Body


### /assets{?perPage,page,createdBy,fromTimestamp,toTimestamp,identifier}

#### Find assets [GET]

Finds assets satisfying provided criteria.

+ Parameters

    + perPage (integer, optional) - number of assets to return per page (limited to 100)
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + createdBy (string, optional) - address of account that created targeting assets
    + fromTimestamp (integer, optional) - earliest timestamp for the asset
    + toTimestamp (integer, optional) - latest timestamp for the asset
    + identifier : identifier[{identifierType}]={identifierValue} (string, optional) - This syntax allows to query for assets that have an associated event containing data type `ambrosus.event.identifier` (see Events Data field section) with same identifier of same type. It is possible to find identifiers matching a pattern with help of the pattern decorator. You can use like this: identifier[vin]=pattern(3FRNF65N*). It supports 2 kinds of special characters:
      - __*__ matches any string, including the null string.
      - __?__ matches any single character
      Note that patterns cannot have a special character as the first symbol for performance reasons. It is not possible to escape special characters.

+ Response 200 (application/json)

    Up to 100 newest assets

    + Attributes (object)
        + results (array) - An array of assets.
            + (object) - Asset.
                + assetId (string) - Content-addressable identifier of the asset.
                + content (object) - All meaningful content of the asset, base of assetId.
                    + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
                    + idData (object) - General information about an asset.
                        + createdBy (string) - Public address of the asset creator.
                        + timestamp (number) - UNIX timestamp of asset creation.
                        + sequenceNumber (number) - Used to assure that all assets are unique
                + metadata (object) - Asset service data.
                    + bundleId (string) - If the asset has already been added to a bundle, Id of the bundle holding the event
                    + bundleTransactionHash (string) - If the asset has already been added to a bundle, identifier of the transaction on which the proof of bundle has been uploaded.
                      More info on the transaction can be found under `http://explorer-test.ambrosus.com/#/tx/{bundleTransactionHash}`
                    + bundleProofBlock (number) - If the asset has already been added to a bundle, block number in which the proof of the bundle has been included
                    + bundleUploadTimestamp (number) - If the asset has already been added to a bundle, timestamp of bundle proof upload

        + resultCount (number) - Total number of assets.


    + Body

            {
                "results": [
                    {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "content": {
                            "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                            "idData": {
                                "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                                "timestamp": 1503424923,
                                "sequenceNumber": 3
                            }
                        },
                        "metadata": {
                            "bundleId": "0x85a427a3.....cd1d38ebbd",
                            "bundleTransactionHash": "0x21ab....1cdf8e55b37",
                            "bundleUploadTimestamp": 1503424969,
                            "bundleProofBlock": 3221
                        }
                    }
                ],
                "resultCount": 112
            }


## Group Events

Events describe all registered changes of state that occurred with the asset. E.g. measured temperature, noted big acceleration or changing pallets. An event consists of the 3 major parts:

* idData – Public information about an event. Contains the ID of the asset, address of the user who has registered the event, minimal access level required to view private data of the event and the timestamp of the event. Additionally idData holds the hash of the Data field.
* Data – Protected information about an event. To get access to the private data, a user needs to have an access level not smaller than the returned event.
* Metadata – Information generated and used by AMB-NET, for example id of a bundle handling an event.

##### Events Data field

Every event has a `data` array, located at `content` with information what actually happened.
Each item in this array is an object with a required `type` field of `string` type.
Following event types are predefined:
* `ambrosus.asset.info` - Human readable information about an asset, such as its name, photos, description, etc.
* `ambrosus.asset.identifiers` - Known identifiers for an asset, must have at least 1 property of type `array`
* `ambrosus.event.identifiers` - Known identifiers for an event, must have at least 1 property of type `array`
* `ambrosus.asset.location` - Location of an asset. Can be expressed with geographical coordinates.
    * `geoJson`: geographical point described with geoJson formula (As described in RFC7946, The GeoJSON Format)
* `ambrosus.event.location` - Location of an event. Can be expressed with geographical coordinates.
    * `geoJson`: geographical point described with geoJson formula (As described in RFC7946, The GeoJSON Format)

### /assets/{assetId}/events

#### Create an event [POST]

Places (after intensive validations) the provided event object into the system.

__Warning__ Message sender needs to have "create_event" permission

+ Parameters

    + assetId: "0xc5cfd04.....30755ed65" (string, required) - ID of an asset

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Attributes (object)
        + eventId (string) - Content-addressable identifier of the event.
        + content (object) - All meaningful content of the event, base of eventId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - Public information about an event.
                + assetId (string) - Id of an asset with which the event is connected.
                + createdBy (string) - Public address of the event creator.
                + accessLevel (number) - The access level of the event. Should be a non-negative integer. Should be greater than or equal to the creator's access level.
                + timestamp (number) - UNIX timestamp of the event creation.
                + dataHash (string) - Hash of the [serialized](Serialization) `data` field
            + data (array) - data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).

    + Body

            {                          
                "eventId": "0x8c1aebc.....6a7ef268e"
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "accessLevel": 4,
                        "timestamp": 1503424923,
                        "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                    },
                    "data": [
                        {
                          "type": "ambrosus.event.customevent",
                          "customField": "customValue"
                        }
                    ]

                }
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "eventId": {
                  "type": "string",
                  "format": "int64",
                  "example": "0xc5cfd04.....30755ed65"
                },
                "contents": {
                  "type": "object",
                  "properties": {
                    "signature": {
                      "type": "string",
                      "format": "int64",
                      "example": "0x30755ed65396facf86c53e6...65c5cfd04be400"
                    },
                    "idData": {
                      "type": "object",
                      "properties": {
                        "assetId": {
                          "type": "string",
                          "format": "int64",
                          "example": "0xc5cfd04.....30755ed65"
                        },
                        "createdBy": {
                          "type": "string",
                          "format": "int64",
                          "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                        },
                        "accessLevel": {
                            "type": "integer",
                            "example": 4
                        }
                        "timestamp": {
                          "type": "integer",
                          "format": "timestamp",
                          "example": 1503424923
                        },
                        "dataHash": {
                          "type": "string",
                          "format": "int64",
                          "example": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                        }
                      }
                    },
                    "data": {
                      "type": "array"
                    }
                  }
                }
              }
            }

+ Response 201 (application/json)

    Created

    + Body

            {
                "eventId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "accessLevel": 4,
                        "timestamp": 1503424923,
                        "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                    },
                    "data": [
                      {
                        "type": "ambrosus.event.customevent",
                        "customField": "customValue"
                      }
                    ]
                }
            }


+ Response 400 (application/json)

    Invalid input

    + Body

+ Response 403 (application/json)

    The createdBy user is not registered or has no "create_event" permission

    + Body

### /events/{eventId}

#### Fetch event [GET]

Fetches an event by identifier

+ Parameters

    + eventId (string, required) - ID of an event

+ Response 200 (application/json)

    The requested event

    + Attributes (object)
        + eventId (string) - Content-addressable identifier of the event.
        + content (object) - All meaningful content of the event, base of eventId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - Public information about an event.
                + assetId  (string) - Id of an asset with which the event is connected.
                + createdBy (string) - Public address of the event creator.
                + accessLevel (number) - The access level of the event. If the user's access level if lower than event's, the data field will not be returned.
                + timestamp (number) - UNIX timestamp of the event creation.
            + data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).
        + metadata (object) - Event service data.
            + bundleId (string) - If the event has already been added to a bundle, Id of the bundle holding the event
            + bundleTransactionHash (string) - If the event has already been added to a bundle, identifier of the transaction on which the proof of bundle has been uploaded.
              More info on the transaction can be found under `http://explorer-test.ambrosus.com/#/tx/{bundleTransactionHash}`
            + bundleProofBlock (number) - If the event has already been added to a bundle, block number in which the proof of the bundle has been included
            + bundleUploadTimestamp (number) - If the event has already been added to a bundle, timestamp of bundle proof upload

    + Body

            {
                "eventId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "accessLevel": 4,
                        "timestamp": 1503424923,
                        "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                    },
                    "data": [
                      {
                        "type": "ambrosus.event.customevent",
                        "customField": "customValue"
                      }
                    ]
                }
            }

+ Response 404 (application/json)

    Event not found

    + Body

### /events{?assetId,fromTimestamp,toTimestamp,perPage,page,createdBy,data}

#### Find events [GET]

Finds event satisfying provided criteria.

+ Parameters

    + assetId (string, optional) - ID of the asset the events are targeting
    + fromTimestamp (integer, optional) - earliest timestamp for the events
    + toTimestamp (integer, optional) - latest timestamp for the events
    + perPage (integer, optional) - number of events to return per page (limited to 100)
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + createdBy (string, optional) - address of account that created targeting events
    + data : data[type]=ambrosus.event.custom (object, optional) - This syntax allows to query for events by any fields in data array. Query for nested fields is possible, e.g. data[acceleration.x]=10. By default the type of the value is string. To provide a number, use data[acceleration.x]=number(10). To provide geo coordinates use data[geoJson]=geo(longitude, latitude, radius). It is possible to match data values by the pattern using the pattern decorator like so `data[type]=pattern(ambrosus.event.*)`. It support 2 kinds of special characters:
       - __*__ matches any string, including the null string.
       - __?__ matches any single character
       Note that patterns cannot have a special character as the first symbol for performance reasons. It is not possible to escape special characters.

+ Response 200 (application/json)

    The requested event

    + Attributes (object)
        + results (array) - Events matching provided criteria on the page
            + (object) - Event.
                + eventId (string) - Content-addressable identifier of the event.
                + content (object) - All meaningful content of the event, base of eventId.
                    + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
                    + idData (object) - Public information about an event.
                        + assetId (string) - Id of an asset with which the event is connected.
                        + createdBy (string) - Public address of the event creator.
                        + accessLevel (number) - The access level of the event. If the user's access level if lower than event's, the data field will not be returned.
                        + timestamp (number) - UNIX timestamp of the event creation.
                    + data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).

        + resultCount (number) - Total number of events matching provided criteria.

    + Body

            {
                "results": [
                    {
                        "eventId": "0xc5cfd04.....30755ed65",
                        "content": {
                            "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                            "idData": {
                                "assetId": "0xc5cfd04.....30755ed65",
                                "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                                "timestamp": 1503424923,
                                "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                            },
                            "data": [
                              {
                                "type": "ambrosus.event.customevent",
                                "customField": "customValue"
                              }
                            ]

                        }
                    }
                ],
                "resultCount": 112
            }

+ Response 400

    One or more of included parameters are not supported, or parameter value is in invalid format

    + Body

+ Response 404

    Event not found

    + Body


## Group Bundles

Bundles are packages of data that are being published by ambrosus node users. Single bundle contains assets, public events and stubs of private events, that user created since last bundle publication.

Bundles are used to exchange data between the users of ambrosus network. Every bundle's Id is stored on the blockchain.

## /bundle/{bundleId}

#### Fetch bundle [GET]

Fetches a bundle by identifier

+ Parameters

    + bundleId (string, required) - ID of a bundle
    

+ Response 200 (application/json)

    The requested bundle

    + Attributes (object)
        + bundleId (string) - Content-addressable identifier of the bundle (keccak hash of content.idData field).
        + content (object) - All meaningful content of the bundle, base of bundleId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - Information about an event.
                + createdBy (string) - Public address of the event creator.
                + timestamp (number) - UNIX timestamp of the event creation.
                + entriesHash (string) - Keccak hash of entries ids, where, depending on entry type, ids are either `assetId` or `eventId`. The order is preserved. 
            + entries (array) - An array consisting of assets, events with public data and stubs of events with private data.

    + Body

            {
                "bundleId" : "0xa9bfd34.....30795ed11",
                "content" : {
                    "signature": "0x69ab59115396facf86c53e6...65cbcfd04be420",
                    "idData" : {
                        "createdBy" : "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp" : 1503424923,
                        "entriesHash" : "0x1022181cd38eb5ca2162a44701727a31f457a559"
                        },
                    "entries" : [
                        "<assets and events stubs>"
                    ]
                }
            }

+ Response 404 (application/json)

    Bundle not found

    + Body

## /bundle/{bundleId}/info

#### Fetch bundle metadata [GET]

Fetches a bundle metadata by identifier

+ Parameters

    + bundleId (string, required) - ID of a bundle
    

+ Response 200 (application/json)

    The requested bundle

    + Attributes (object)
        + bundleId (string) - Content-addressable identifier of the bundle.
        + bundleTransactionHash (string) - Identifier of the transaction on which the proof of bundle has been uploaded.
          More info on the transaction can be found under `http://explorer-test.ambrosus.com/#/tx/{bundleTransactionHash}`
        + bundleProofBlock (number) - Block number in which the proof of the bundle has been included
        + bundleUploadTimestamp (number) - Timestamp of bundle proof upload
        + version (number) - Version of the bundle


    + Body

            {
                "bundleId" : "0xa9bfd34.....30795ed11",
                "bundleTransactionHash": "0xc9087b7510e98183f705fe99ddb6964f3b845878d8a801cf6b110975599b6009",
                "bundleProofBlock": 142,
                "bundleUploadTimestamp": 1503424969,
                "version": 2
            }

+ Response 404 (application/json)

    Bundle doesn't exist or the metadata for it is missing

    + Body

## Group Nodeinfo

Information on the Gateway node.

## /nodeinfo

#### Get node info [GET]

+ Response 200

    + Attributes (object)
        + commit (string) - Hash of the latest git commit on the node
        + version (string) - Version of the Ambrosus Node
        + nodeAddress (string) - An Ambrosus address of the node
        + workerLogs (array) - An array containing up to 10 last worker logs (Hermes or Atlas - depending on node type)


    + Body

            {
                "commit" : "e7b85366ba78e34d4ec98cbcc01a4ae0aa36b098",
                "version": "0.0.1",
                "nodeAddress": "0xEbDEAC82424a053DFf79397862BD122F76798bC5",
                "workerLogs": [
                    "<up to 10 worker logs>"
                ]
            }

