FORMAT: 1A
HOST: network.ambrosus.com

# Ambrosus Node API

Welcome to Ambrosus Node API Documentation.  

### Authentication
Before you can start interacting with API you need to create an account. An account is a pair: address and secret.

Each state-modifying call needs to have the `content.idData.createdBy` field with creator address and one of two:
* A body field `content.signature`. It is generated with ethereum sign function from the serialized `content.data` object. Serialisation algorithm will be described in separate section.
* A http authoristaion header `AMB ...`: You can supply your secret to API and gateway will calculate the signature for you. __Warning__: This is only allowed in development and testing environment. We strongly recommend against using it in a production environment.

### Immutability

__Note:__ All data is immutable, therefore, you will not find update or delete calls.

### Errors

The majority of errors along to the error code provide additional information in `body` with following format:
```{json}
{
  "reason": "What happened"
}
```


## Group Account

An account represents an actor in the supply chain. This can be a person, a company, a location, etc.

It consists of a pair - a public identifer `address` (compatible with ethereum address) and a `secret` (compatible with ethereum private key). Additionally an account has a list of permissions which specify the account's access levels.

### /accounts

#### Create account [POST]

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
                "content": {
                    "idData": {
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                    }
                }
            }



+ Response 201 (application/json)

    Created.

    + Body

            {
                "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                "secret": "0x17d08f5fe8c77af811caa0c9a187e668ce3b74a99acc3f6d976f075fa8e0be55"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                },
                "secret": {
                  "type": "string",
                  "example": "0x17d08f5fe8c77af811caa0c9a187e668ce3b74a99acc3f6d976f075fa8e0be55"
                }
              }
            }

+ Response 400 (application/json)

    Validation error

    + Body

+ Response 403 (application/json)

    Invalid createdBy, invalid signature or missing create_account permission

    + Body

## Group Asset

Assets are primary elements moving through a supply chain. The are the nouns of the system. They can represent an ingredient, product, package of products or any other type of container.

An Asset on its own function only as a handle for a Event stream. Because of this, they only contain an `idData` structure holding minimal infomation about their creation.

Assets are identified by an `assetId` field which is a sha3 hash calculated from the `content` field.

### /assets

#### Create an asset [POST]

Places (after intensive validations) the provided asset object into the system.

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Body

            {
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp": 1503424923,
                        "sequenceNumber": 3
                    }
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "assetId": {
                  "type": "string",
                  "format": "int64",
                  "example": "0xc5cfd04.....30755ed65"
                },
                "contents": {
                  "type": "object",
                  "properties": {
                    "signature": {
                      "type": "string",
                      "format": "int64",
                      "example": "0x30755ed65396facf86c53e6...65c5cfd04be400"
                    },
                    "idData": {
                      "type": "object",
                      "properties": {
                        "createdBy": {
                          "type": "string",
                          "format": "int64",
                          "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                        },
                        "timestamp": {
                          "type": "integer",
                          "format": "timestamp",
                          "example": 1503424923
                        },
                        "sequenceNumber": {
                          "type": "integer",
                          "example": 3
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 201 (application/json)

    Created

    + Body

            {
                "assetId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp": 1503424923,
                        "sequenceNumber": 3
                    }
                }
            }

+ Response 400 (application/json)

    Invalid input

    + Body

+ Response 403 (application/json)

    The createdBy user is not registered

    + Body

### /accounts/{address}

### Finds an account by address [GET]


+ Parameters

    + address (string, required) - Address of an account

+ Response 200 (application/json)

  Account with provided address

  + Body

            {
                "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                "secret": "0x17d08f5fe8c77af811caa0c9a187e668ce3b74a99acc3f6d976f075fa8e0be55"
            }

+ Response 404 (application/json)

    Account with such address doesn't exist

    + Body


### /assets/{assetId}

#### Find an asset by Id [GET]

Finds asset with provided assetId in the system.

+ Parameters

    + assetId (string, required) - ID of an asset

+ Response 200 (application/json)

    Asset with provided assetId

    + Body

            {
                "assetId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp": 1503424923,
                        "sequenceNumber": 3
                    }
                }
            }

+ Response 404 (application/json)

    No asset with such assetId found

    + Body

## Group Events

### /assets/{assetId}/events

#### Create an event [POST]

Places (after intensive validations) the provided event object into the system.

+ Parameters

    + assetId (string, required) - ID of an asset

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Body

            {
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp": 1503424923,
                        "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                    },
                    "data": {

                    }
                }
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "eventId": {
                  "type": "string",
                  "format": "int64",
                  "example": "0xc5cfd04.....30755ed65"
                },
                "contents": {
                  "type": "object",
                  "properties": {
                    "signature": {
                      "type": "string",
                      "format": "int64",
                      "example": "0x30755ed65396facf86c53e6...65c5cfd04be400"
                    },
                    "idData": {
                      "type": "object",
                      "properties": {
                        "assetId": {
                          "type": "string",
                          "format": "int64",
                          "example": "0xc5cfd04.....30755ed65"
                        },
                        "createdBy": {
                          "type": "string",
                          "format": "int64",
                          "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                        },
                        "timestamp": {
                          "type": "integer",
                          "format": "timestamp",
                          "example": 1503424923
                        },
                        "dataHash": {
                          "type": "string",
                          "format": "int64",
                          "example": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                        }
                      }
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }

+ Response 201 (application/json)

    Created

    + Body

            {
                "eventId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp": 1503424923,
                        "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                    },
                    "data": {

                    }
                }
            }


+ Response 400 (application/json)

    Invalid input

    + Body

+ Response 403 (application/json)

    The createdBy user is not registered

    + Body

### /assets/{assetId}/events/{eventId}

#### Fetch event [GET]

Fetches an event by identifier

+ Parameters

    + assetId (string, required) - ID of an asset
    
    + eventId (string, required) - ID of an event

+ Response 200 (application/json)

    The requested event

    + Body

            {
                "eventId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp": 1503424923,
                        "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                    },
                    "data": {

                    }
                }
            }

+ Response 404 (application/json)

    Event not found

    + Body
    
### /events{?assetId,fromTimestamp,toTimestamp,perPage,page}

#### Find events [GET]

Finds event satisfying provided cryteria.

+ Parameters

    + assetId : 0xc5cfd04.....30755ed65 (string, optional) - ID of the asset the events are targeting
    + fromTimestamp : 1503424922 (integer, optional) - earliest timestamp for the events 
    + toTimestamp : 1503424924 (integer, optional) - latest timestamp for the events
    + perPage : 150 (integer, optional) - number of events to return per page
    + page : 20 (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)

+ Response 200 (application/json)

    The requested event

    + Body

            {
                results: [
                    {
                        "eventId": "0xc5cfd04.....30755ed65",
                        "content": {
                            "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                            "idData": {
                                "assetId": "0xc5cfd04.....30755ed65",
                                "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                                "timestamp": 1503424923,
                                "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                            },
                            "data": {
        
                            }
                        }
                    }
                ],
                resultCount: 112
            }

+ Response 400

    One or more of included parameters are not supported, or parameter value is in invalid format

    + Body

+ Response 404

    Event not found

    + Body


## Group Bundles

## /bundle/{bundleId}

#### Fetch bundle [GET]

Fetches a bundle by identifier

+ Parameters

    + bundleId (string, required) - ID of a bundle
    

+ Response 200 (application/json)

    The requested event

    + Body

            {
                "bundleId" : "<hash (content addressable) calcuated from contents field>",
                "contents" : {
                    "signature": "<eliptic curve signature of the idData field>",
                    "idData" : {
                        "createdBy" : "<address (public key derived) of vendor holding data>",
                        "timestamp" : "<unix epoch timestamp>",
                        "entriesHash" : "<hash calculated from the entries field>"
                        },
                    "entries" : [
                        "<asset and events stubs>"
                    ]
                },
                "metadata" : {
                }
            }

+ Response 404 (application/json)

    Bundle not found

    + Body
    