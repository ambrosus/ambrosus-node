swagger: "2.0"
info:
  description: |
    Welcome to Ambrosus Node API Documentation.  

    ### Authentication
    Before you can start interacting with API you need to create an account. An account is a pair: address and secret.

    Each state-modifying call needs to have the `content.idData.createdBy` field with creator address and one of two:
    * A body field `content.signature`. It is generated with ethereum sign function from the serialized `content.data` object. Serialisation algorithm will be described in separate section.
    * A http authoristaion header `AMB ,,,`: You can supply your secret to API and gateway will calculate the signature for you. __Warning__: This is only allowed in development and testing environment. We strongly recommend against using it in a production environment.

    ### Immutability

    __Note:__ All data is immutable, therefore, you will not find update or delete calls.

  version: "0.0.1"
  title: "Ambrosus Node API"
  contact:
    email: "marek@ambrosus.com"
host: 'network.ambrosus.com'
tags:
- name: "Account"
  description: |
    An account represents an actor in the supply chain. This can be a person, a company, a location, etc.
    
    It consists of a pair - a public identifer `address` (compatible with ethereum address) and a `secret` (compatible with ethereum private key).
    
- name: "Asset"
  description: |
    Assets are primary elements moving through a supply chain. The are the nouns of the system. They can represent an ingredient, product, package of products or any other type of container.

    An Asset on its own function only as a handle for a Event stream. Because of this, they only contain an `idData` structure holding minimal infomation about their creation.

    Assets are identified by an `assetId` field which is a sha3 hash calculated from the `content` field.

- name: "Event"
  description: |
    Events represent changes to the state of an Asset. They are the verbs and adjectives of the system. They can represent for example: location changes, sensor readings, packacking into bigger boxes, mixing into other products, etc.

    An Event is strictly bound to it's Asset. They containt a `idData` structure holding information about their creation, and a `data` structure holding the actual data. This separation is important as the visibility of the `data` field can be restricted.

    Events are identified by an `eventId` field which is a sha3 hash calculated from the `content` field.

schemes:
- "https"
paths:
  /accounts:
    post:
      tags:
      - "Account"
      summary: "Create account"
      description: ""
      operationId: "createAccount"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        201:
          description: "Created."
          schema:
            $ref: "#/definitions/Account"
  /assets:
    post:
      tags:
      - "Asset"
      summary: "Create an asset"
      description: | 
        Places (after intensive validations) the provided asset object into the system.
      operationId: "createAsset"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: body
        name: "data"
        description: "Asset object to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Asset"
      - in: header
        name: "Authorization"
        type: "string"
        description: "If present, will instruct the server to sign the asset before adding"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Asset"
        400:
          description: "Invalid input"
  /assets/{assetId}:
    get:
      tags:
      - "Asset"
      summary: "Find an asset by Id"
      description: |
        Finds asset with provided assetId in the system.
      operationId: "fetchAsset"
      produces:
        - "application/json"
      parameters:
      - name: "assetId"
        in: "path"
        description: "ID of an asset"
        required: true
        type: "string"
      responses:
        200:
          description: "Asset with provided assetId"
          schema:
            $ref: "#/definitions/Asset"
        404:
          description: "No asset with such assetId found"
  /assets/{assetId}/events:
    post:
      tags:
      - "Events"
      summary: "Create an event"
      description: |
        Places (after intensive validations) the provided event object into the system.
      operationId: "createEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: path
        name: "assetId"
        required: true
        type: string
      - in: body
        name: "data"
        description: "Event object to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Event"
      - in: header
        name: "Authorization"
        type: "string"
        description: "If present, will instruct the server to sign the event before adding"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Invalid input"

definitions:
  Account:
    type: "object"
    properties:
      address:
        type: "string"
        example: "0x162a44701727a31f457a53801cd181cd38eb5bbd"
      secret:
        type: "string"
        example: "0x17d08f5fe8c77af811caa0c9a187e668ce3b74a99acc3f6d976f075fa8e0be55"

  Asset:
    type: "object"
    properties:
      assetId:
        type: "string"
        format: "int64"
        example: "0xc5cfd04.....30755ed65"
      contents:
        type: "object"
        properties:
          signature:
            type: "string"
            format: "int64"
            example: "0x30755ed65396facf86c53e6...65c5cfd04be400"
          idData:
            $ref: "#/definitions/AssetIdData"

  AssetIdData:
    type: "object"
    properties:
        createdBy:
          type: "string"
          format: "int64"
          example: "0x162a44701727a31f457a53801cd181cd38eb5bbd"
        timestamp:
          type: "integer"
          format: "timestamp"
          example: 1503424923
        sequenceNumber:
          type: "integer"
          example: 3

  Event:
    type: "object"
    properties:
      eventId:
        type: "string"
        format: "int64"
        example: "0xc5cfd04.....30755ed65"
      contents:
        type: "object"
        properties:
          signature:
            type: "string"
            format: "int64"
            example: "0x30755ed65396facf86c53e6...65c5cfd04be400"
          idData:
            $ref: "#/definitions/EventIdData"
          data:
            type: "object"

  EventIdData:
    type: "object"
    properties:
        assetId:
          type: "string"
          format: "int64"
          example: "0xc5cfd04.....30755ed65"
        createdBy:
          type: "string"
          format: "int64"
          example: "0x162a44701727a31f457a53801cd181cd38eb5bbd"
        timestamp:
          type: "integer"
          format: "timestamp"
          example: 1503424923
        dataHash:
          type: "string"
          format: "int64"
          example: "0x01cd181cd38eb5bbd162a44701727a31f457a538"
