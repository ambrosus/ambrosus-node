FORMAT: 1A
HOST: https://gateway-test.ambrosus.com

# Ambrosus Node API

Welcome to Ambrosus Node API Documentation.  

### Authentication
Before you can start interacting with API you need to create an account. An account is a pair: address and secret.

Each state-modifying call needs to have the `content.idData.createdBy` field with creator address and one of two:
* A body field `content.signature`. It is generated with ethereum sign function from the serialized `content.data` object. Serialisation algorithm will be described in separate section.
* A http authorization header `AMB ...`: You can supply your secret to API and gateway will calculate the signature for you. __Warning__: This is only allowed in development and testing environment. We strongly recommend against using it in a production environment.

### Immutability

__Note:__ All data is immutable, therefore, you will not find update or delete calls.

### Errors

The majority of errors along to the error code provide additional information in `body` with following format:
```{json}
{
  "reason": "What happened"
}
```

## Group Token

Some requests require an access token for authorization.

### /token

#### Create token [POST]

__Warning__ This call can be used for development purposes only. Never provide your secret address to anyone.

+ Request
    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Attributes (object)
        + validUntil (number) - Unix timestamp in the future specifying the token expiration time.

    + Body

            {
                "validUntil": 1546300800
            }
+ Response 201 (application/json)

    Created

    + Attributes (object)
        + token (string) - Base64 encoded signed token data.

    + Body

            {
                "token": "eyJpZERhdGEiOnsiY3JlYXRlZEJ5IjoiMHg3NDJFNjJDQzdBMTlFZjdEOWM0NDMwNkMwN0ZBZDU0QjViRjZkNGJFIiwidmFsaWRVbnRpbCI6NDJ9LCJzaWduYXR1cmUiOiIweDY4MWVjZjRiNzM3YzViNGY5ZjlhYTZlMDUzOWIzMzAyNzY0NDQzYWRlNWNmMWJhMTIxMGFmNzA1MTdkYTczOWY1MzBlNTEwYmI0NTc1N2YyNWZiZTE3NzczMWVhNzAxYjVmOTU5NGZlYmQ0ZDA2YjEwOGYyM2NhYjAyMmU5MzNmMWIifQ"
            }


## Group Account

An account represents an actor in the supply chain. This can be a person, a company, a location, etc.

It consists of a pair - a public identifer `address` (compatible with ethereum address) and a `secret` (compatible with ethereum private key). Additionally an account has a list of permissions, which specify what actions user can perform and an access levels, which specifies what data is user able to view.

### /accounts

#### Add account [POST]

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB_TOKEN ...

    + Attributes (object)
        + address (string) - An address of the new account
        + permissions (array) - A list of permissions granted to this account
        + accessLevel (number) - Access level of the account. Should be a non-negative integer.

    + Body

            {
                "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                "permissions" : ["register_account","create_entity"],
                "accessLevel" : 0
            }



+ Response 201 (application/json)

    Added.

    + Body

            {
                "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                "registeredBy": "0x345b44701723a31f457a534801cd181cd38eb5bcd",
                "registeredOn": 32141243,
                "permissions": ["register_account", "create_entity"],
                "accessLevel": 0
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                },
                "registeredBy": {
                  "type": "string",
                  "example": "0x345b44701723a31f457a534801cd181cd38eb5bcd"
                },
                "registeredOn": {
                  "type": "integer"
                },
                "accessLevel": {
                  "type": "integer"
                },
                "permissions": {
                  "type": "array",
                  "items" : {
                  "type" : "string"
                  }
                  "example": ["register_account", "create_entity"]
                }
              }
            }

+ Response 400 (application/json)

    Validation error

    + Body

+ Response 401 (application/json)

    Authentication error

    + Body

+ Response 403 (application/json)

    Invalid signature or missing register_account permission

    + Body

### /accounts{?accessLevel,perPage,page,fromTimestamp,toTimestamp}

#### Find accounts [GET]

Finds accounts satisfying provided criteria.


+ Parameters

    + accessLevel (string, optional) - Finds only accounts with access level not smaller than parameter
    + perPage (integer, optional) - number of assets to return per page
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + fromTimestamp (integer, optional) - earliest timestamp for the asset
    + toTimestamp (integer, optional) - latest timestamp for the asset

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB_TOKEN ...

+ Response 200 (application/json)

    + Attributes (object)
        + results (array) - The latest 100 accounts matching provided criteria
            + (object) - Account.
              + registeredBy (string) - The address which has registered the account.
              + registeredOn (number) -  - UNIX timestamp of account registration.
              + permissions (array) - A list of permissions granted to this account
              + accessLevel (number) - Access level of the account. Should be a non-negative integer.
        + resultCount (number) - Total number of accounts matching provided criteria.


    + Body

            {
                "results": [
                    {
                        "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                        "registeredBy": "0x345b44701723a31f457a534801cd181cd38eb5bcd",
                        "permissions": ["register_account", "create_entity"],
                        "accessLevel": 4
                    }
                ],
                "resultCount": 322
            }

+ Response 400 (application/json)

    Validation error

    + Body

+ Response 401 (application/json)

    Authentication error

    + Body

+ Response 403 (application/json)

    Invalid signature or missing register_account permission

    + Body

+ Response 404 (application/json)

    Requested account does not exist

    + Body


### /accounts/{accountAddress}

#### Get account [GET]

+ Parameters
    + accountAddress (string) - An address of the account


+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB_TOKEN ...

+ Response 200 (application/json)

    + Attributes (object)
        + registeredBy (string) - The address which has registered the account.
        + registeredOn (number) -  - UNIX timestamp of account registration.
        + permissions (array) - A list of permissions granted to this account
        + accessLevel (number) - Access level of the account. Should be a non-negative integer.

    + Body

            {
                "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                "registeredBy": "0x345b44701723a31f457a534801cd181cd38eb5bcd",
                "registeredOn": 32141243,
                "permissions": ["register_account", "create_entity"],
                "accessLevel": 4
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                },
                "registeredBy": {
                  "type": "string",
                  "example": "0x345b44701723a31f457a534801cd181cd38eb5bcd"
                },
                "registeredOn": {
                  "type": "integer"
                },
                "permissions": {
                  "type": "array",
                  "items" : {
                  "type" : "string"
                  }
                  "example": ["register_account", "create_entity"]
                },
                "accessLevel": {
                  "type": "integer"
                }
              }
            }


+ Response 400 (application/json)

    Validation error

    + Body

+ Response 401 (application/json)

    Authentication error

    + Body

+ Response 403 (application/json)

    Invalid signature or missing register_account permission

    + Body


#### Modify account [PUT]

+ Parameters
    + accountAddress (string) - An address of the account


+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB_TOKEN ...

    + Attributes (object)
        + permissions (array) - A list of permissions granted to this account
        + accessLevel (number) - Access level of the account. Should be a non-negative integer.

    + Body

            {
                "permissions" : ["register_account","create_entity"],
                "accessLevel" : 0
            }



+ Response 200 (application/json)

    + Body

            {
                "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                "registeredBy": "0x345b44701723a31f457a534801cd181cd38eb5bcd",
                "registeredOn": 32141243,
                "permissions": ["register_account", "create_entity"],
                "accessLevel": 4
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                },
                "registeredBy": {
                  "type": "string",
                  "example": "0x345b44701723a31f457a534801cd181cd38eb5bcd"
                },
                "registeredOn": {
                  "type": "integer"
                },
                "accessLevel": {
                  "type": "integer"
                },
                "permissions": {
                  "type": "array",
                  "items" : {
                  "type" : "string"
                  }
                  "example": ["register_account", "create_entity"]
                }
              }
            }

+ Response 400 (application/json)

    Validation error

    + Body

+ Response 401 (application/json)

    Authentication error

    + Body

+ Response 403 (application/json)

    Invalid signature or missing register_account permission

    + Body


## Group Asset

Assets are primary elements moving through a supply chain. The are the nouns of the system. They can represent an ingredient, product, package of products or any other type of container.

An Asset on its own function only as a handle for a Event stream. Because of this, they only contain an `idData` structure holding minimal infomation about their creation.

Assets are identified by an `assetId` field which is a sha3 hash calculated from the `content` field.

### /assets

#### Create an asset [POST]

Places (after intensive validations) the provided asset object into the system.

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Attributes (object)
        + assetId (string) - Content-addressable identifier of the asset.
        + content (object) - All meaningful content of the asset, base of assetId.
            + signature (string) - elliptic-curve signature of the idData field. Should be signed with the creator's private address.
            + idData (object) - General information about an asset.
                + createdBy  (string) - Public address of the asset creator.
                + timestamp (number) - UNIX timestamp of asset creation.
                + sequenceNumber (number) - Used to assure that all assets are unique


    + Body

            {
                "assetId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp": 1503424923,
                        "sequenceNumber": 3
                    }
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "assetId": {
                  "type": "string",
                  "format": "int64",
                  "example": "0xc5cfd04.....30755ed65"
                },
                "contents": {
                  "type": "object",
                  "properties": {
                    "signature": {
                      "type": "string",
                      "format": "int64",
                      "example": "0x30755ed65396facf86c53e6...65c5cfd04be400"
                    },
                    "idData": {
                      "type": "object",
                      "properties": {
                        "createdBy": {
                          "type": "string",
                          "format": "int64",
                          "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                        },
                        "timestamp": {
                          "type": "integer",
                          "format": "timestamp",
                          "example": 1503424923
                        },
                        "sequenceNumber": {
                          "type": "integer",
                          "example": 3
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 201 (application/json)

    Created

    + Body

            {
                "assetId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp": 1503424923,
                        "sequenceNumber": 3
                    }
                }
            }

+ Response 400 (application/json)

    Invalid input

    + Body

+ Response 403 (application/json)

    The createdBy user is not registered or has no "create_entity" permission

    + Body


### /assets/{assetId}

#### Fetch an asset by Id [GET]

Fetches asset with provided assetId in the system.

+ Parameters

    + assetId (string, required) - ID of an asset

+ Response 200 (application/json)

    Asset with provided assetId

    + Attributes (object)
        + assetId (string) - Content-addressable identifier of the asset.
        + content (object) - All meaningful content of the asset, base of assetId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - General information about an asset.
                + createdBy (string) - Public address of the asset creator.
                + timestamp (number) - UNIX timestamp of asset creation.
                + sequenceNumber (number) - Used to assure that all assets are unique
        + metadata (object) - Asset service data.
            + bundleId (string) - If the asset has already been added to a bundle, Id of the bundle holding the event
            + bundleTransactionHash (string) - If the asset has already been added to a bundle, identifier of the transaction on which the proof of bundle has been uploaded.
              More info on the transaction can be found under `http://explorer-test.ambrosus.com/#/tx/{bundleTransactionHash}`



    + Body

            {
                "assetId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp": 1503424923,
                        "sequenceNumber": 3
                    }
                },
                "metadata": {
                    "bundleId": "0x85a427a3.....cd1d38ebbd",
                    "bundleTransactionHash": "0x21ab....1cdf8e55b37"
                }
            }

+ Response 404 (application/json)

    No asset with such assetId found

    + Body


### /assets{?perPage,page,createdBy}

#### Find assets [GET]

Finds assets satisfying provided criteria.

+ Parameters

    + perPage (integer, optional) - number of assets to return per page
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + createdBy (string, optional) - address of account that created targeting assets
    
+ Response 200 (application/json)

    Up to 100 newest assets

    + Attributes (object)
        + results (array) - An array of assets.
            + (object) - Asset.
                + assetId (string) - Content-addressable identifier of the asset.
                + content (object) - All meaningful content of the asset, base of assetId.
                    + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
                    + idData (object) - General information about an asset.
                        + createdBy (string) - Public address of the asset creator.
                        + timestamp (number) - UNIX timestamp of asset creation.
                        + sequenceNumber (number) - Used to assure that all assets are unique
                + metadata (object) - Asset service data.
                    + bundleId (string) - If the asset has already been added to a bundle, Id of the bundle holding the event
                    + bundleTransactionHash (string) - If the asset has already been added to a bundle, identifier of the transaction on which the proof of bundle has been uploaded.
                      More info on the transaction can be found under `http://explorer-test.ambrosus.com/#/tx/{bundleTransactionHash}`

        + resultCount (number) - Total number of assets.


    + Body

            {
                "results": [
                    {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "content": {
                            "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                            "idData": {
                                "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                                "timestamp": 1503424923,
                                "sequenceNumber": 3
                            }
                        },
                        "metadata": {
                            "bundleId": "0x85a427a3.....cd1d38ebbd",
                            "bundleTransactionHash": "0x21ab....1cdf8e55b37"
                        }
                    }
                ],
                "resultCount": 112
            }


## Group Events

Events describe all registered changes of state that occurred with the asset. E.g. measured temperature, noted big acceleration or changing pallets. An event consists of the 3 major parts:

* idData – Public information about an event. Contains the ID of the asset, address of the user who has registered the event, minimal access level required to view private data of the event and the timestamp of the event.
* Data – Protected information about an event. To get access to the private data, a user needs to have an access level not smaller than the returned event.
* Metadata – Information generated and used by AMB-NET, for example id of a bundle handling an event.

##### Events Data field

Every event has a `data` array, located at `content` with information what actually happened.
Each item in this array is an object with a required `type` field of `string` type.
Following event types are predefined:
* `ambrosus.event.identifiers` - Known identifiers for an event, must have at least 1 property of type `array`
* `ambrosus.event.location.asset` - Location expressed with an assetId, required are:
    * `asset`: id of the other asset where event's subject is located
* `ambrosus.event.location.geo` - Location of an event expressed with geographical coordinates.
    * `geoJson`: geographical point described with geoJson formula (As described in RFC7946, The GeoJSON Format)
* `ambrosus.asset.location.geo` - Location of an asset expressed with geographical coordinates.
    * `geoJson`: geographical point described with geoJson formula (As described in RFC7946, The GeoJSON Format)

### /assets/{assetId}/events

#### Create an event [POST]

Places (after intensive validations) the provided event object into the system.

+ Parameters

    + assetId: "0xc5cfd04.....30755ed65" (string, required) - ID of an asset

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Attributes (object)
        + eventId (string) - Content-addressable identifier of the event.
        + content (object) - All meaningful content of the event, base of eventId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - Public information about an event.
                + assetId (string) - Id of an asset with which the event is connected.
                + createdBy (string) - Public address of the event creator.
                + accessLevel (number) - The access level of the event. Should be a non-negative integer.
                + timestamp (number) - UNIX timestamp of the event creation.
            + data (array) - data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).

    + Body

            {                          
                "eventId": "0x8c1aebc.....6a7ef268e"
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "accessLevel": 4,
                        "timestamp": 1503424923,
                        "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                    },
                    "data": [
                        {
                          "type": "ambrosus.event.customevent",
                          "customField": "customValue"
                        }
                    ]

                }
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "eventId": {
                  "type": "string",
                  "format": "int64",
                  "example": "0xc5cfd04.....30755ed65"
                },
                "contents": {
                  "type": "object",
                  "properties": {
                    "signature": {
                      "type": "string",
                      "format": "int64",
                      "example": "0x30755ed65396facf86c53e6...65c5cfd04be400"
                    },
                    "idData": {
                      "type": "object",
                      "properties": {
                        "assetId": {
                          "type": "string",
                          "format": "int64",
                          "example": "0xc5cfd04.....30755ed65"
                        },
                        "createdBy": {
                          "type": "string",
                          "format": "int64",
                          "example": "0x162a44701727a31f457a53801cd181cd38eb5bbd"
                        },
                        "accessLevel": {
                            "type": "integer",
                            "example": 4
                        }
                        "timestamp": {
                          "type": "integer",
                          "format": "timestamp",
                          "example": 1503424923
                        },
                        "dataHash": {
                          "type": "string",
                          "format": "int64",
                          "example": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                        }
                      }
                    },
                    "data": {
                      "type": "array"
                    }
                  }
                }
              }
            }

+ Response 201 (application/json)

    Created

    + Body

            {
                "eventId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "accessLevel": 4,
                        "timestamp": 1503424923,
                        "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                    },
                    "data": [
                      {
                        "type": "ambrosus.event.customevent",
                        "customField": "customValue"
                      }
                    ]
                }
            }


+ Response 400 (application/json)

    Invalid input

    + Body

+ Response 403 (application/json)

    The createdBy user is not registered or has no "create_entity" permission

    + Body

### /events/{eventId}

#### Fetch event [GET]

Fetches an event by identifier

+ Parameters

    + eventId (string, required) - ID of an event

+ Response 200 (application/json)

    The requested event

    + Attributes (object)
        + eventId (string) - Content-addressable identifier of the event.
        + content (object) - All meaningful content of the event, base of eventId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - Public information about an event.
                + assetId  (string) - Id of an asset with which the event is connected.
                + createdBy (string) - Public address of the event creator.
                + accessLevel (number) - The access level of the event. If the user's access level if lower than event's, the data field will not be returned.
                + timestamp (number) - UNIX timestamp of the event creation.
            + data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).
        + metadata (object) - Event service data.
            + bundleId (string) - If the event has already been added to a bundle, Id of the bundle holding the event
            + bundleTransactionHash (string) - If the event has already been added to a bundle, identifier of the transaction on which the proof of bundle has been uploaded.
              More info on the transaction can be found under `http://explorer-test.ambrosus.com/#/tx/{bundleTransactionHash}`


    + Body

            {
                "eventId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "accessLevel": 4,
                        "timestamp": 1503424923,
                        "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                    },
                    "data": [
                      {
                        "type": "ambrosus.event.customevent",
                        "customField": "customValue"
                      }
                    ]
                }
            }

+ Response 404 (application/json)

    Event not found

    + Body

### /events{?assetId,fromTimestamp,toTimestamp,perPage,page,createdBy,data}

#### Find events [GET]

Finds event satisfying provided criteria.

+ Parameters

    + assetId (string, optional) - ID of the asset the events are targeting
    + fromTimestamp (integer, optional) - earliest timestamp for the events
    + toTimestamp (integer, optional) - latest timestamp for the events
    + perPage (integer, optional) - number of events to return per page
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + createdBy (string, optional) - address of account that created targeting events
    + data : data[type]=ambrosus.event.custom (object, optional) - This syntax allows to query for events by any fields in data array. Query for nested fields is possible, e.g. data[acceleration.x]=10. By default the type of the value is string. To provide a number, use data[acceleration.x]=number(10). To provide geo coordinates use data[geoJson]=geo(longitude, latitude, radius).

+ Response 200 (application/json)

    The requested event

    + Attributes (object)
        + results (array) - Events matching provided criteria on the page
            + (object) - Event.
                + eventId (string) - Content-addressable identifier of the event.
                + content (object) - All meaningful content of the event, base of eventId.
                    + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
                    + idData (object) - Public information about an event.
                        + assetId (string) - Id of an asset with which the event is connected.
                        + createdBy (string) - Public address of the event creator.
                        + accessLevel (number) - The access level of the event. If the user's access level if lower than event's, the data field will not be returned.
                        + timestamp (number) - UNIX timestamp of the event creation.
                    + data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).

        + resultCount (number) - Total number of events matching provided criteria.

    + Body

            {
                "results": [
                    {
                        "eventId": "0xc5cfd04.....30755ed65",
                        "content": {
                            "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                            "idData": {
                                "assetId": "0xc5cfd04.....30755ed65",
                                "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                                "timestamp": 1503424923,
                                "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                            },
                            "data": [
                              {
                                "type": "ambrosus.event.customevent",
                                "customField": "customValue"
                              }
                            ]

                        }
                    }
                ],
                "resultCount": 112
            }

+ Response 400

    One or more of included parameters are not supported, or parameter value is in invalid format

    + Body

+ Response 404

    Event not found

    + Body


## Group Bundles

Bundles are packages of data that are being published by ambrosus node users. Single bundle contains assets, public events and stubs of private events, that user created since last bundle publication.

Bundles are used to exchange data between the users of ambrosus network. Every bundle's Id is stored on the blockchain.

## /bundle/{bundleId}

#### Fetch bundle [GET]

Fetches a bundle by identifier

+ Parameters

    + bundleId (string, required) - ID of a bundle
    

+ Response 200 (application/json)

    The requested bundle

    + Attributes (object)
        + bundleId (string) - Content-addressable identifier of the bundle.
        + content (object) - All meaningful content of the bundle, base of bundleId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - Information about an event.
                + createdBy (string) - Public address of the event creator.
                + timestamp (number) - UNIX timestamp of the event creation.
                + entriesHash (string) - Hash calculated from the entries field.
            + entries (array) - An array consisting of assets, events with public data and stubs of events with private data.
        + metadata (object) - Bundle service data.
            + bundleTransactionHash (string) - Identifier of the transaction on which the proof of bundle has been uploaded.
              More info on the transaction can be found under `http://explorer-test.ambrosus.com/#/tx/{bundleTransactionHash}`
            + proofBlock (number) - Block number in which the transaction was included


    + Body

            {
                "bundleId" : "0xa9bfd34.....30795ed11",
                "content" : {
                    "signature": "0x69ab59115396facf86c53e6...65cbcfd04be420",
                    "idData" : {
                        "createdBy" : "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp" : 1503424923,
                        "entriesHash" : "0x1022181cd38eb5ca2162a44701727a31f457a559"
                        },
                    "entries" : [
                        "<assets and events stubs>"
                    ]
                },
                "metadata" : {
                  "bundleTransactionHash": "0xc9087b7510e98183f705fe99ddb6964f3b845878d8a801cf6b110975599b6009",
                  "proofBlock": 142
                }
            }

+ Response 404 (application/json)

    Bundle not found

    + Body

## Group Nodeinfo

Information on the Gateway node.

## /nodeinfo

#### Get node info [GET]

+ Response 200

    + Attributes (object)
        + commit (string) - Hash of the latest git commit on the node
        + version (string) - Version of the Ambrosus Node
        + nodeAddress (string) - An Ambrosus address of the node

    + Body

          {
              "commit": "e7b85366ba78e34d4ec98cbcc01a4ae0aa36b098",
              "version": "0.0.1",
              "nodeAddress": "0xEbDEAC82424a053DFf79397862BD122F76798bC5"
          }
